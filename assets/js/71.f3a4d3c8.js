(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{612:function(t,i,_){"use strict";_.r(i);var v=_(1),a=Object(v.a)({},(function(){var t=this,i=t._self._c;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h2",{attrs:{id:"_1、git命令提交代码步骤"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_1、git命令提交代码步骤"}},[t._v("#")]),t._v(" 1、git命令提交代码步骤")]),t._v(" "),i("p",[t._v("每天开始开发前先pull仓库最新代码")]),t._v(" "),i("ul",[i("li",[t._v("git pull origin dev (拉取dev分支最新代码)")]),t._v(" "),i("li",[t._v("git add . (将本地代码全部提交到缓存区)")]),t._v(" "),i("li",[t._v("git commit -m'提交描述' (提交代码到本地仓库)")]),t._v(" "),i("li",[t._v("git pull origin dev (多人开发此时最好再拉取一次代码)"),i("br"),t._v(" "),i("code",[t._v("接下来无冲突，直接执行下一个步骤（push）;有冲突，先解决冲突，然后继续执行add、commit、pull命令，最后再执行push命令")])]),t._v(" "),i("li",[t._v("git push origin dev (将代码推送到远程仓库)")])]),t._v(" "),i("h2",{attrs:{id:"_2、创建、查看、删除、合并分支等命令"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2、创建、查看、删除、合并分支等命令"}},[t._v("#")]),t._v(" 2、创建、查看、删除、合并分支等命令")]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"title"}),i("p",[t._v("git clone [仓库地址] （克隆项目到本地）")]),t._v(" "),i("p",[t._v("git branch dev（创建dev分支）"),i("br"),t._v("\ngit checkout dev（切换到dev分支）"),i("br"),t._v("\ngit checkout -b dev（创建dev分支并切换到dev分支）"),i("br"),t._v("\ngit pull origin dev（切换到dev分支后拉取代码下来）")]),t._v(" "),i("p",[t._v("git branch（查看本地分支）"),i("br"),t._v("\ngit branch -a（查看本地和远程分支）"),i("br"),t._v("\ngit branch -r（查看远程所有分支）"),i("br"),t._v(" "),i("strong",[i("code",[t._v("git fetch origin （刷新分支，如git branch -a无法查看最新的分支情况时，可以先刷新一下）")])])]),t._v(" "),i("p",[t._v("git branch -d dev（删除dev分支）"),i("br"),t._v("\ngit branch -D dev（强行删除）"),i("br"),t._v("\ngit push origin --delete dev（删除远程dev分支）")]),t._v(" "),i("p",[t._v("git status (查看当前工作区状态)"),i("br"),t._v("\ngit diff（如果文件已被修改且已保存了，该命令可以查看修改的内容）")]),t._v(" "),i("p",[t._v("git merge dev (合并dev分支到当前分支)"),i("br"),t._v("\ngit merge --quit 退出当前分支合并，当合并后冲突很多，要撤回合并分支就用这个命令")]),t._v(" "),i("p",[t._v("git diff 分支1..分支2 （查看两个分支差异）"),i("br"),t._v("\ngit diff 分支1..分支2 -- 完整文件路径 （查看指定分支指定文件差异）")])]),i("h2",{attrs:{id:"_3、查看-修改git配置信息"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_3、查看-修改git配置信息"}},[t._v("#")]),t._v(" 3、查看/修改git配置信息")]),t._v(" "),i("ul",[i("li",[t._v("git config --list （查看用户名和邮箱名）")]),t._v(" "),i("li",[t._v('git config --global user.name "xxxx(新的用户名)" （修改用户名）')]),t._v(" "),i("li",[t._v('git config --global user.password "xxxx(新的密码)" （修改密码）')]),t._v(" "),i("li",[t._v('git config --global user.email "xxxx@xxx.com(新的邮箱)" （修改邮箱）')])]),t._v(" "),i("h2",{attrs:{id:"_4、查看历史提交记录"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_4、查看历史提交记录"}},[t._v("#")]),t._v(" 4、查看历史提交记录")]),t._v(" "),i("ul",[i("li",[t._v("git log （当前分支的历史版本,当一页内无法显示所有历史版本，回车：显示下一行；空格：显示下一页，输入q可退出）")]),t._v(" "),i("li",[t._v("git log --pretty=oneline （以简单行形式显示历史记录信息）")]),t._v(" "),i("li",[t._v("git log -2 （查看最近2次的提交内容）")]),t._v(" "),i("li",[t._v("git log --all （查看所有分支历史版本")]),t._v(" "),i("li",[t._v("git log master（查看master分支的历史版本）")]),t._v(" "),i("li",[t._v("git reflog （查看所有历史版本（所有引起HEAD指针变动的操作，例如切换分支等操作），比git log更全面）")]),t._v(" "),i("li",[t._v("git blame file_name (查看指定文件的修改记录)")])]),t._v(" "),i("h2",{attrs:{id:"_5、代码回退"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_5、代码回退"}},[t._v("#")]),t._v(" 5、代码回退")]),t._v(" "),i("h3",{attrs:{id:"git-add之前工作区代码改动想回退"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-add之前工作区代码改动想回退"}},[t._v("#")]),t._v(" git add之前工作区代码改动想回退")]),t._v(" "),i("ul",[i("li",[t._v("git checkout -- [file-name]")])]),t._v(" "),i("h3",{attrs:{id:"git-add-之后回退"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-add-之后回退"}},[t._v("#")]),t._v(" git add 之后回退")]),t._v(" "),i("ul",[i("li",[t._v("git reset HEAD")])]),t._v(" "),i("h3",{attrs:{id:"git-commit-之后回退"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-之后回退"}},[t._v("#")]),t._v(" git commit 之后回退")]),t._v(" "),i("ul",[i("li",[t._v("git reset --soft commit_id（回退到某个版本，commit_id是版本id，"),i("code",[t._v("soft模式会保留本地代码修改，hard则不会")]),t._v("）")])]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"title"}),i("p",[t._v("git reset --soft（撤销commit）"),i("br"),t._v("\ngit reset --mixed（撤销 commit 和 add 两个动作）")])]),i("h3",{attrs:{id:"git-push-之后回退"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-push-之后回退"}},[t._v("#")]),t._v(" git push 之后回退")]),t._v(" "),i("ul",[i("li",[t._v("git reset --hard commit_id（回退到某个版本，commit_id是版本id,"),i("code",[t._v("soft模式会保留本地代码修改，hard则不会")]),t._v("）")]),t._v(" "),i("li",[t._v("git push -f origin [branch-name] (强制推送到远程，之前提交都会被覆盖，慎用。"),i("code",[t._v("如果push失败，应该是远程仓库配置了拒绝任何非快进的推送，需要管理员权限修改")]),t._v(")")])]),t._v(" "),i("h3",{attrs:{id:"git-merge-之后回退"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-merge-之后回退"}},[t._v("#")]),t._v(" git merge 之后回退")]),t._v(" "),i("ul",[i("li",[t._v("git revert commit_id -m 1 （1 最近的merge操作。"),i("code",[t._v("会保留当前分支的代码，只回滚掉来源分支的代码")]),t._v("。commit_id是合并操作的那个id，推荐使用）")]),t._v(" "),i("li",[t._v("git reset --hard  commit_id （回滚后完全回到最初状态，需要强制push。不推荐使用）")])]),t._v(" "),i("h2",{attrs:{id:"_6、删除文件"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_6、删除文件"}},[t._v("#")]),t._v(" 6、删除文件")]),t._v(" "),i("ul",[i("li",[t._v("git rm test.txt（删除test.txt文件）")]),t._v(" "),i("li",[t._v("git commit -m “删除test.txt文件”（提交修改）")]),t._v(" "),i("li",[t._v("git checkout - test.txt （若删除错后还原test.txt文件）")])]),t._v(" "),i("h2",{attrs:{id:"_7、切换分支不想提交本地修改"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_7、切换分支不想提交本地修改"}},[t._v("#")]),t._v(" 7、切换分支不想提交本地修改")]),t._v(" "),i("p",[t._v("假设在A分支修改后需要切换到B分支修改bug，但是还不想提交A分支的代码")]),t._v(" "),i("ul",[i("li",[t._v("git stash  (将当前A分支存储，就可以切换到B分支了)")]),t._v(" "),i("li",[t._v("git stash apply (切换回A分支后，恢复之前的修改)")]),t._v(" "),i("li",[t._v("git stash pop(恢复且删除存储列表)")]),t._v(" "),i("li",[t._v("git stash drop (删除存储列表)")]),t._v(" "),i("li",[t._v("git stash list （查看缓存列表）")]),t._v(" "),i("li",[t._v("git stash drop stash@{id} (删除指定id的存储列表)")])]),t._v(" "),i("h2",{attrs:{id:"_8、关于-gitignore"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_8、关于-gitignore"}},[t._v("#")]),t._v(" 8、关于.gitignore")]),t._v(" "),i("h3",{attrs:{id:"创建-gitignore"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#创建-gitignore"}},[t._v("#")]),t._v(" 创建.gitignore")]),t._v(" "),i("ul",[i("li",[t._v("在项目所在目录右键选择"),i("code",[t._v("Git Bash")]),t._v("进入命令行；")]),t._v(" "),i("li",[t._v("输入 "),i("code",[t._v("touch .gitignore")]),t._v(" 就生成了一个“.gitignore”文件，然后在”.gitignore” 文件里输入你要忽略的文件就可以了。")])]),t._v(" "),i("h3",{attrs:{id:"清除-gitignore缓存"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#清除-gitignore缓存"}},[t._v("#")]),t._v(" 清除.gitignore缓存")]),t._v(" "),i("ul",[i("li",[t._v("git rm -r --cached")]),t._v(" "),i("li",[t._v("git add .")]),t._v(" "),i("li",[t._v("git commit -m'.gitignore重写缓存'")]),t._v(" "),i("li",[t._v("git push")])]),t._v(" "),i("h2",{attrs:{id:"_9、git-commit忽略代码校验"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_9、git-commit忽略代码校验"}},[t._v("#")]),t._v(" 9、git commit忽略代码校验")]),t._v(" "),i("p",[t._v("在git commit 后面加上 --no-verify")]),t._v(" "),i("ul",[i("li",[t._v("git commit -m'提交描述' --no-verify")])]),t._v(" "),i("h2",{attrs:{id:"_10、为某个项目单独设置github用户名和密码"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_10、为某个项目单独设置github用户名和密码"}},[t._v("#")]),t._v(" 10、为某个项目单独设置github用户名和密码")]),t._v(" "),i("ul",[i("li",[t._v("cd .git (进入项目.git文件)")]),t._v(" "),i("li",[t._v("git config user.name '你的账号名' （设置用户名）")]),t._v(" "),i("li",[t._v("cat config （查看现在的git配置文件，会看到配置最后一行多了用户名，这就是单独为该项目设置的用户账号）")]),t._v(" "),i("li",[t._v("git config credential.helper 'store --file .git/.my-credentials'  (指定存取位置,再次查看配置,看到最后一行新增了helper及设置成功)")])])])}),[],!1,null,null,null);i.default=a.exports}}]);